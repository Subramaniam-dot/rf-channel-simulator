options:
  parameters:
    author: ''
    catch_exceptions: 'True'
    category: '[GRC Hier Blocks]'
    cmake_opt: ''
    comment: ''
    copyright: ''
    description: FM modulation adapted from the GNC Tutorial page
    gen_cmake: 'On'
    gen_linking: dynamic
    generate_options: qt_gui
    hier_block_src_path: '.:'
    id: AM
    max_nouts: '0'
    output_language: python
    placement: (0,0)
    qt_qss_theme: ''
    realtime_scheduling: ''
    run: 'True'
    run_command: '{python} -u {filename}'
    run_options: prompt
    sizing_mode: fixed
    thread_safe_setters: ''
    title: AM Audio modulation
    window_size: (1000,1000)
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [32, 12.0]
    rotation: 0
    state: enabled

blocks:
- name: SNR
  id: variable
  parameters:
    comment: ''
    value: '10*(lambda x: __import__(''math'').log(x, 10))(1**2/noise_volt**2)'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1504, 36.0]
    rotation: 0
    state: enabled
- name: carrier_freq
  id: variable
  parameters:
    comment: ''
    value: 5e3
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [472, 16.0]
    rotation: 0
    state: enabled
- name: freq_off_max
  id: variable
  parameters:
    comment: ''
    value: +samp_rate/2
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1296, 1068.0]
    rotation: 0
    state: enabled
- name: freq_off_min
  id: variable
  parameters:
    comment: ''
    value: -samp_rate/2
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1280, 988.0]
    rotation: 0
    state: enabled
- name: freq_offset
  id: variable_qtgui_range
  parameters:
    comment: 0,2,1,1
    gui_hint: ''
    label: 'Channel: Frequency Offset'
    min_len: '200'
    orient: QtCore.Qt.Horizontal
    rangeType: float
    start: '-0.2'
    step: '0.001'
    stop: '0.2'
    value: '0.00'
    widget: counter_slider
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [952, 16.0]
    rotation: 0
    state: disabled
- name: freq_offset
  id: variable
  parameters:
    comment: ''
    value: '1000'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1192, 884.0]
    rotation: 0
    state: enabled
- name: if_rate
  id: variable
  parameters:
    comment: ''
    value: '192000'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [392, 16.0]
    rotation: 0
    state: enabled
- name: noise_volt
  id: variable_qtgui_range
  parameters:
    comment: 0,0,1,1
    gui_hint: ''
    label: 'Channel: Noise Voltage'
    min_len: '200'
    orient: QtCore.Qt.Horizontal
    rangeType: float
    start: '0'
    step: '0.01'
    stop: '1'
    value: '0.01'
    widget: counter_slider
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1304, 36.0]
    rotation: 0
    state: enabled
- name: noise_volt
  id: variable
  parameters:
    comment: ''
    value: '0.3'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1200, 20.0]
    rotation: 0
    state: disabled
- name: samp_rate
  id: variable
  parameters:
    comment: ''
    value: '48000'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [200, 16.0]
    rotation: 0
    state: enabled
- name: taps
  id: variable
  parameters:
    comment: ''
    value: '[1.0 + 0.0j, ]'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [552, 16.0]
    rotation: 0
    state: enabled
- name: time_offset
  id: variable_qtgui_range
  parameters:
    comment: 0,1,1,1
    gui_hint: ''
    label: 'Channel: Timing Offset'
    min_len: '200'
    orient: QtCore.Qt.Horizontal
    rangeType: float
    start: '0.999'
    step: '0.0001'
    stop: '1.001'
    value: '1.0001'
    widget: counter_slider
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [784, 16.0]
    rotation: 0
    state: enabled
- name: volume
  id: variable_qtgui_range
  parameters:
    comment: ''
    gui_hint: ''
    label: audio_gain
    min_len: '200'
    orient: QtCore.Qt.Horizontal
    rangeType: float
    start: '0'
    step: '1'
    stop: '50'
    value: '5'
    widget: counter_slider
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [288, 16.0]
    rotation: 0
    state: true
- name: analog_sig_source_x_0
  id: analog_sig_source_x
  parameters:
    affinity: ''
    alias: ''
    amp: '1'
    comment: ''
    freq: carrier_freq
    maxoutbuf: '0'
    minoutbuf: '0'
    offset: '0'
    phase: '0'
    samp_rate: samp_rate
    showports: 'False'
    type: float
    waveform: analog.GR_SIN_WAVE
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [856, 224.0]
    rotation: 0
    state: enabled
- name: audio_source_0
  id: audio_source
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    device_name: hw:CARD=Generic_1,DEV=0
    maxoutbuf: '0'
    minoutbuf: '0'
    num_outputs: '1'
    ok_to_block: 'True'
    samp_rate: samp_rate
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [16, 512.0]
    rotation: 0
    state: enabled
- name: band_pass_filter_0
  id: band_pass_filter
  parameters:
    affinity: ''
    alias: ''
    beta: '6.76'
    comment: ''
    decim: '1'
    gain: '1'
    high_cutoff_freq: '5000'
    interp: '1'
    low_cutoff_freq: '300'
    maxoutbuf: '0'
    minoutbuf: '0'
    samp_rate: samp_rate
    type: fir_filter_fff
    width: '200'
    win: window.WIN_HAMMING
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [544, 380.0]
    rotation: 0
    state: true
- name: blocks_add_const_vxx_0
  id: blocks_add_const_vxx
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    const: '0.5'
    maxoutbuf: '0'
    minoutbuf: '0'
    type: float
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [848, 416.0]
    rotation: 0
    state: enabled
- name: blocks_float_to_complex_0
  id: blocks_float_to_complex
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1376, 320.0]
    rotation: 0
    state: enabled
- name: blocks_msgpair_to_var_0
  id: blocks_msgpair_to_var
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    target: freq_offset
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1208, 1188.0]
    rotation: 0
    state: enabled
- name: blocks_multiply_const_vxx_0
  id: blocks_multiply_const_vxx
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    const: volume
    maxoutbuf: '0'
    minoutbuf: '0'
    type: float
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1008, 416.0]
    rotation: 0
    state: true
- name: blocks_multiply_xx_0
  id: blocks_multiply_xx
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    num_inputs: '2'
    type: float
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1224, 320.0]
    rotation: 0
    state: enabled
- name: blocks_selector_0
  id: blocks_selector
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    enabled: 'True'
    input_index: '0'
    maxoutbuf: '0'
    minoutbuf: '0'
    num_inputs: '3'
    num_outputs: '1'
    output_index: '0'
    showports: 'False'
    type: float
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [312, 368.0]
    rotation: 0
    state: enabled
- name: blocks_throttle2_0
  id: blocks_throttle2
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    ignoretag: 'True'
    limit: auto
    maximum: '0.1'
    maxoutbuf: '0'
    minoutbuf: '0'
    samples_per_second: samp_rate
    type: float
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1056, 256.0]
    rotation: 0
    state: enabled
- name: blocks_wavfile_source_0
  id: blocks_wavfile_source
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    file: ../../Audio_Recording/audio
    maxoutbuf: '0'
    minoutbuf: '0'
    nchan: '1'
    repeat: 'True'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [16, 352.0]
    rotation: 0
    state: enabled
- name: blocks_wavfile_source_0_0
  id: blocks_wavfile_source
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    file: ../../Audio_Recording/audio
    maxoutbuf: '0'
    minoutbuf: '0'
    nchan: '1'
    repeat: 'True'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [16, 432.0]
    rotation: 0
    state: enabled
- name: channels_channel_model_0_0
  id: channels_channel_model
  parameters:
    affinity: ''
    alias: ''
    block_tags: 'False'
    comment: ''
    epsilon: time_offset
    freq_offset: freq_offset
    maxoutbuf: '0'
    minoutbuf: '0'
    noise_voltage: noise_volt
    seed: '0'
    taps: taps
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [424, 800.0]
    rotation: 0
    state: enabled
- name: epy_block_0_0
  id: epy_block
  parameters:
    _source_code: "import numpy as np\nfrom gnuradio import gr\nimport pmt\nimport\
      \ logging\nclass blk(gr.sync_block):\n    \"\"\"Random Number Generator\"\"\"\
      \n    def __init__(self, min_val=0, max_val=1):\n        gr.sync_block.__init__(\n\
      \            self,\n            name='Random Number Generator',\n          \
      \  in_sig=None,\n            out_sig=None)\n        \n        self.min_val =\
      \ float(min_val)\n        self.max_val = float(max_val)\n        \n        #\
      \ Message ports\n        self.message_port_register_in(pmt.intern('trigger'))\n\
      \        self.message_port_register_out(pmt.intern('rand_out'))\n        self.set_msg_handler(pmt.intern('trigger'),\
      \ self.handle_trigger)\n        \n        # Setup logging\n        logging.basicConfig(level=logging.INFO)\n\
      \        self.logger = logging.getLogger(\"random_num_gen\")\n    \n    def\
      \ set_min_val(self, min_val):\n        \"\"\"Callback to update minimum value\"\
      \"\"\n        self.min_val = float(min_val)\n        \n    def set_max_val(self,\
      \ max_val):\n        \"\"\"Callback to update maximum value\"\"\"\n        self.max_val\
      \ = float(max_val)\n        \n    def handle_trigger(self, msg):\n        #\
      \ Generate new random number\n        rand_num = np.random.uniform(self.min_val,\
      \ self.max_val)\n        \n        # Create message\n        msg = pmt.from_double(rand_num)\n\
      \        \n        # Send the message\n        self.message_port_pub(pmt.intern('rand_out'),\
      \ msg)\n        \n        # Log\n        self.logger.info(f\"Sending random\
      \ number: {rand_num}\")\n\n    def work(self, input_items, output_items):\n\
      \        return 0\n"
    affinity: ''
    alias: ''
    comment: ''
    max_val: freq_off_max
    maxoutbuf: '0'
    min_val: freq_off_min
    minoutbuf: '0'
  states:
    _io_cache: ('Random Number Generator', 'blk', [('min_val', '0'), ('max_val', '1')],
      [('trigger', 'message', 1)], [('rand_out', 'message', 1)], 'Random Number Generator',
      ['max_val', 'min_val'])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [872, 1356.0]
    rotation: 0
    state: true
- name: epy_block_1
  id: epy_block
  parameters:
    _source_code: "\"\"\"\nEmbedded Python Block for Custom File Writer\n\"\"\"\n\n\
      import numpy as np\nfrom gnuradio import gr\nimport pmt\nfrom collections import\
      \ deque\nimport logging\nimport os\n\nclass blk(gr.sync_block):\n    def __init__(self,\
      \ filename='output', num_samples=2048,\n             modulation_scheme=\"AM\"\
      , snr=10000.0, freq_offset=1000.0, max_files=500):\n        gr.sync_block.__init__(\n\
      \            self,\n            name='Custom File Writer',\n            in_sig=[np.complex64],\n\
      \            out_sig=None)\n\n        # Register message ports\n        self.message_port_register_in(pmt.intern(\"\
      enable_write\"))\n        self.set_msg_handler(pmt.intern(\"enable_write\"),\
      \ self.handle_message)\n        # Add output message port for write signal\n\
      \        self.message_port_register_out(pmt.intern(\"write\"))\n    \n     \
      \   # Parameters\n        self._last_snr = None\n        self._last_freq_offset\
      \ = None\n        self.snr = float(snr)\n        self.freq_offset = float(freq_offset)\n\
      \        self.counter = 0\n        self.samples_per_file = int(num_samples)\n\
      \        self.base_filename = str(filename)\n        self.modulation_scheme\
      \ = str(modulation_scheme)\n        self.max_files = int(max_files)\n      \
      \  self.buffer = deque()\n        self.done = False\n        self.enable_write\
      \ = False\n        \n        # Setup logging\n        logging.basicConfig(level=logging.INFO)\n\
      \        self.logger = logging.getLogger(\"custom_file_writer\")\n        \n\
      \        # Setup initial directory\n        self.setup_directory()\n       \
      \ \n        self.logger.info(f\"Initialized with SNR={self.snr}, freq_offset={self.freq_offset}\"\
      )\n\n    def set_snr(self, snr):\n        \"\"\"SNR parameter callback\"\"\"\
      \n        self.snr = float(snr)\n        self.logger.info(f\"SNR changed to:\
      \ {self.snr}\")\n        self.check_parameters()\n\n    def set_freq_offset(self,\
      \ freq_offset):\n        \"\"\"Frequency offset parameter callback\"\"\"\n \
      \       self.freq_offset = float(freq_offset)\n        self.logger.info(f\"\
      Frequency offset changed to: {self.freq_offset}\")\n        self.check_parameters()\n\
      \n    def check_parameters(self):\n        \"\"\"Check if parameters have changed\"\
      \"\"\n        if (self._last_snr != self.snr) or (self._last_freq_offset !=\
      \ self.freq_offset):\n            self.logger.info(f\"New parameter combination\
      \ detected - SNR: {self.snr}, Freq Offset: {self.freq_offset}\")\n         \
      \   self._last_snr = self.snr\n            self._last_freq_offset = self.freq_offset\n\
      \            self.counter = 0\n            self.done = False\n            self.setup_directory()\n\
      \            return True\n        return False\n\n    def setup_directory(self):\n\
      \        \"\"\"Create directory for current parameters\"\"\"\n        # Remove\
      \ freq_offset from directory name since it changes for each file\n        self.dir_name\
      \ = f\"mod_{self.modulation_scheme}_snr_{self.snr}\"\n        if not os.path.exists(self.dir_name):\n\
      \            os.makedirs(self.dir_name)\n        self.filename = os.path.join(self.dir_name,\
      \ self.base_filename)\n        self.logger.info(f\"Created directory: {self.dir_name}\"\
      )\n\t    \n    def write_metadata_file(self, filename):\n        \"\"\"Write\
      \ metadata file with current parameters\"\"\"\n        meta_filename = filename.replace(\"\
      .dat\", \".txt\")\n        try:\n            with open(meta_filename, 'w') as\
      \ meta_file:\n                meta_file.write(f\"Modulation Scheme = {self.modulation_scheme}\\\
      n\")\n                meta_file.write(f\"Signal to Noise Ratio = {self.snr}\
      \ dB\\n\")\n                meta_file.write(f\"Frequency Offset = {self.freq_offset}\
      \ Hz\\n\")\n                meta_file.write(f\"Number of Samples = {self.samples_per_file}\\\
      n\")\n                meta_file.write(f\"File Number = {self.counter + 1} of\
      \ {self.max_files}\\n\")\n        except IOError as e:\n            self.logger.error(f\"\
      Failed to write metadata file: {e}\")\n \n    def handle_message(self, msg):\n\
      \        \"\"\"Handle enable_write messages\"\"\"\n        try:\n          \
      \  if pmt.is_pair(msg):\n                value = pmt.to_python(pmt.cdr(msg))\n\
      \            elif pmt.is_bool(msg):\n                value = pmt.to_python(msg)\n\
      \            else:\n                value = bool(pmt.to_python(msg))\n     \
      \       \n            self.enable_write = value\n            \n            if\
      \ self.enable_write:\n                # Always check parameters when writing\
      \ is enabled\n                self.check_parameters()\n                if not\
      \ self.done:\n                    self.write_to_file()\n                else:\n\
      \                    self.logger.info(f\"Already completed {self.max_files}\
      \ files for current parameters\")\n        except Exception as e:\n        \
      \    self.logger.error(f\"Error in message handler: {e}\")\n\n    def write_to_file(self):\n\
      \        \"\"\"Write samples to file\"\"\"\n        if self.done or not self.enable_write:\n\
      \            return\n            \n        if len(self.buffer) < self.samples_per_file:\n\
      \            self.logger.warning(f\"Buffer contains only {len(self.buffer)}\
      \ samples, need {self.samples_per_file}\")\n            return\n           \
      \ \n        # Send write trigger message before writing file\n        self.message_port_pub(pmt.intern(\"\
      write\"), pmt.to_pmt(\"trigger\"))\n        \n        filename = f\"{self.filename}_{self.counter}.dat\"\
      \n        try:\n            with open(filename, 'wb') as f:\n              \
      \  samples_to_write = list(self.buffer)[:self.samples_per_file]\n          \
      \      f.write(np.array(samples_to_write, dtype=np.complex64).tobytes())\n \
      \               \n            self.write_metadata_file(filename)\n         \
      \   \n            for _ in range(self.samples_per_file):\n                self.buffer.popleft()\n\
      \                \n            self.counter += 1\n            self.logger.info(f\"\
      Writing to {self.dir_name}: File {self.counter} of {self.max_files}\")\n   \
      \         \n            if self.counter >= self.max_files:\n               \
      \ self.done = True\n                self.enable_write = False\n            \
      \    self.logger.info(f\"Completed generating {self.max_files} files for {self.dir_name}\"\
      )\n        except IOError as e:\n            self.logger.error(f\"Failed to\
      \ write data file: {e}\")\n\n    def work(self, input_items, output_items):\n\
      \        \"\"\"Process incoming samples\"\"\"\n        if self.done:\n     \
      \       return len(input_items[0])\n            \n        self.buffer.extend(input_items[0])\n\
      \        \n        if len(self.buffer) >= self.samples_per_file and self.enable_write\
      \ and not self.done:\n            self.write_to_file()\n            \n     \
      \   return len(input_items[0])\n"
    affinity: ''
    alias: ''
    comment: ''
    filename: '"output"'
    freq_offset: freq_offset
    max_files: '200'
    maxoutbuf: '0'
    minoutbuf: '0'
    modulation_scheme: '"AM"'
    num_samples: '2048'
    snr: SNR
  states:
    _io_cache: ('Custom File Writer', 'blk', [('filename', "'output'"), ('num_samples',
      '2048'), ('modulation_scheme', "'AM'"), ('snr', '10000.0'), ('freq_offset',
      '1000.0'), ('max_files', '500')], [('0', 'complex', 1), ('enable_write', 'message',
      1)], [('write', 'message', 1)], '', ['filename', 'freq_offset', 'max_files',
      'modulation_scheme', 'snr'])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [920, 948.0]
    rotation: 0
    state: enabled
- name: id_write_button
  id: variable_qtgui_msg_push_button
  parameters:
    comment: ''
    gui_hint: ''
    label: write
    msgName: pressed
    relBackgroundColor: default
    relFontColor: default
    type: bool
    value: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [280, 956.0]
    rotation: 0
    state: disabled
- name: id_write_button
  id: variable_qtgui_msg_push_button
  parameters:
    comment: ''
    gui_hint: ''
    label: ''
    msgName: pressed
    relBackgroundColor: default
    relFontColor: default
    type: real
    value: freq_offset
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [608, 1108.0]
    rotation: 0
    state: enabled
- name: low_pass_filter_0_0
  id: low_pass_filter
  parameters:
    affinity: ''
    alias: ''
    beta: '6.76'
    comment: ''
    cutoff_freq: '5000'
    decim: '1'
    gain: '1'
    interp: '1'
    maxoutbuf: '0'
    minoutbuf: '0'
    samp_rate: samp_rate
    type: fir_filter_ccf
    width: '2000'
    win: window.WIN_HAMMING
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [224, 788.0]
    rotation: 0
    state: enabled
- name: qtgui_freq_sink_x_0
  id: qtgui_freq_sink_x
  parameters:
    affinity: ''
    alias: ''
    alpha1: '1.0'
    alpha10: '1.0'
    alpha2: '1.0'
    alpha3: '1.0'
    alpha4: '1.0'
    alpha5: '1.0'
    alpha6: '1.0'
    alpha7: '1.0'
    alpha8: '1.0'
    alpha9: '1.0'
    autoscale: 'False'
    average: '0.2'
    axislabels: 'True'
    bw: samp_rate
    color1: '"blue"'
    color10: '"dark blue"'
    color2: '"red"'
    color3: '"green"'
    color4: '"black"'
    color5: '"cyan"'
    color6: '"magenta"'
    color7: '"yellow"'
    color8: '"dark red"'
    color9: '"dark green"'
    comment: ''
    ctrlpanel: 'False'
    fc: '0'
    fftsize: '1024'
    freqhalf: 'True'
    grid: 'False'
    gui_hint: ''
    label: Relative Gain
    label1: ''
    label10: ''''''
    label2: ''''''
    label3: ''''''
    label4: ''''''
    label5: ''''''
    label6: ''''''
    label7: ''''''
    label8: ''''''
    label9: ''''''
    legend: 'True'
    maxoutbuf: '0'
    minoutbuf: '0'
    name: '""'
    nconnections: '1'
    norm_window: 'False'
    showports: 'False'
    tr_chan: '0'
    tr_level: '0.0'
    tr_mode: qtgui.TRIG_MODE_FREE
    tr_tag: '""'
    type: complex
    units: dB
    update_time: '0.10'
    width1: '1'
    width10: '1'
    width2: '1'
    width3: '1'
    width4: '1'
    width5: '1'
    width6: '1'
    width7: '1'
    width8: '1'
    width9: '1'
    wintype: window.WIN_BLACKMAN_hARRIS
    ymax: '10'
    ymin: '-140'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [928, 664.0]
    rotation: 0
    state: enabled
- name: qtgui_time_sink_x_0
  id: qtgui_time_sink_x
  parameters:
    affinity: ''
    alias: ''
    alpha1: '1.0'
    alpha10: '1.0'
    alpha2: '1.0'
    alpha3: '1.0'
    alpha4: '1.0'
    alpha5: '1.0'
    alpha6: '1.0'
    alpha7: '1.0'
    alpha8: '1.0'
    alpha9: '1.0'
    autoscale: 'False'
    axislabels: 'True'
    color1: blue
    color10: dark blue
    color2: red
    color3: green
    color4: black
    color5: cyan
    color6: magenta
    color7: yellow
    color8: dark red
    color9: dark green
    comment: ''
    ctrlpanel: 'False'
    entags: 'True'
    grid: 'False'
    gui_hint: ''
    label1: Audio Signal
    label10: Signal 10
    label2: AM Modulated Data
    label3: Signal 3
    label4: Signal 4
    label5: Signal 5
    label6: Signal 6
    label7: Signal 7
    label8: Signal 8
    label9: Signal 9
    legend: 'True'
    marker1: '-1'
    marker10: '-1'
    marker2: '-1'
    marker3: '-1'
    marker4: '-1'
    marker5: '-1'
    marker6: '-1'
    marker7: '-1'
    marker8: '-1'
    marker9: '-1'
    name: Raw and Modulated Data
    nconnections: '2'
    size: '1024'
    srate: samp_rate
    stemplot: 'False'
    style1: '1'
    style10: '1'
    style2: '1'
    style3: '1'
    style4: '1'
    style5: '1'
    style6: '1'
    style7: '1'
    style8: '1'
    style9: '1'
    tr_chan: '0'
    tr_delay: '0'
    tr_level: '0.0'
    tr_mode: qtgui.TRIG_MODE_FREE
    tr_slope: qtgui.TRIG_SLOPE_POS
    tr_tag: '""'
    type: float
    update_time: '0.10'
    width1: '1'
    width10: '1'
    width2: '1'
    width3: '1'
    width4: '1'
    width5: '1'
    width6: '1'
    width7: '1'
    width8: '1'
    width9: '1'
    ylabel: Amplitude
    ymax: '4'
    ymin: '-4'
    yunit: '""'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1200, 504.0]
    rotation: 0
    state: true
- name: qtgui_time_sink_x_0_0
  id: qtgui_time_sink_x
  parameters:
    affinity: ''
    alias: ''
    alpha1: '1.0'
    alpha10: '1.0'
    alpha2: '1.0'
    alpha3: '1.0'
    alpha4: '1.0'
    alpha5: '1.0'
    alpha6: '1.0'
    alpha7: '1.0'
    alpha8: '1.0'
    alpha9: '1.0'
    autoscale: 'False'
    axislabels: 'True'
    color1: blue
    color10: dark blue
    color2: red
    color3: green
    color4: black
    color5: cyan
    color6: magenta
    color7: yellow
    color8: dark red
    color9: dark green
    comment: ''
    ctrlpanel: 'False'
    entags: 'False'
    grid: 'False'
    gui_hint: ''
    label1: Signal 1
    label10: Signal 10
    label2: Signal 2
    label3: Signal 3
    label4: Signal 4
    label5: Signal 5
    label6: Signal 6
    label7: Signal 7
    label8: Signal 8
    label9: Signal 9
    legend: 'True'
    marker1: '-1'
    marker10: '-1'
    marker2: '-1'
    marker3: '-1'
    marker4: '-1'
    marker5: '-1'
    marker6: '-1'
    marker7: '-1'
    marker8: '-1'
    marker9: '-1'
    name: '""'
    nconnections: '1'
    size: '1024'
    srate: samp_rate
    stemplot: 'False'
    style1: '1'
    style10: '1'
    style2: '1'
    style3: '1'
    style4: '1'
    style5: '1'
    style6: '1'
    style7: '1'
    style8: '1'
    style9: '1'
    tr_chan: '0'
    tr_delay: '0'
    tr_level: '0.0'
    tr_mode: qtgui.TRIG_MODE_FREE
    tr_slope: qtgui.TRIG_SLOPE_POS
    tr_tag: '""'
    type: complex
    update_time: '0.10'
    width1: '1'
    width10: '1'
    width2: '1'
    width3: '1'
    width4: '1'
    width5: '1'
    width6: '1'
    width7: '1'
    width8: '1'
    width9: '1'
    ylabel: Amplitude
    ymax: '2'
    ymin: '-2'
    yunit: '""'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [768, 776.0]
    rotation: 0
    state: enabled
- name: qtgui_waterfall_sink_x_0
  id: qtgui_waterfall_sink_x
  parameters:
    affinity: ''
    alias: ''
    alpha1: '1.0'
    alpha10: '1.0'
    alpha2: '1.0'
    alpha3: '1.0'
    alpha4: '1.0'
    alpha5: '1.0'
    alpha6: '1.0'
    alpha7: '1.0'
    alpha8: '1.0'
    alpha9: '1.0'
    axislabels: 'True'
    bw: samp_rate
    color1: '0'
    color10: '0'
    color2: '0'
    color3: '0'
    color4: '0'
    color5: '0'
    color6: '0'
    color7: '0'
    color8: '0'
    color9: '0'
    comment: ''
    fc: '0'
    fftsize: '1024'
    freqhalf: 'True'
    grid: 'False'
    gui_hint: ''
    int_max: '10'
    int_min: '-140'
    label1: ''
    label10: ''
    label2: ''
    label3: ''
    label4: ''
    label5: ''
    label6: ''
    label7: ''
    label8: ''
    label9: ''
    legend: 'True'
    maxoutbuf: '0'
    minoutbuf: '0'
    name: '""'
    nconnections: '1'
    showports: 'False'
    type: complex
    update_time: '0.10'
    wintype: window.WIN_BLACKMAN_hARRIS
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [768, 864.0]
    rotation: 0
    state: enabled
- name: virtual_sink_0
  id: virtual_sink
  parameters:
    alias: ''
    comment: ''
    stream_id: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1536, 328.0]
    rotation: 0
    state: enabled
- name: virtual_source_0
  id: virtual_source
  parameters:
    alias: ''
    comment: ''
    stream_id: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [64, 816.0]
    rotation: 0
    state: enabled

connections:
- [analog_sig_source_x_0, '0', blocks_throttle2_0, '0']
- [audio_source_0, '0', blocks_selector_0, '2']
- [band_pass_filter_0, '0', blocks_add_const_vxx_0, '0']
- [blocks_add_const_vxx_0, '0', blocks_multiply_const_vxx_0, '0']
- [blocks_float_to_complex_0, '0', virtual_sink_0, '0']
- [blocks_multiply_const_vxx_0, '0', blocks_multiply_xx_0, '1']
- [blocks_multiply_const_vxx_0, '0', qtgui_time_sink_x_0, '0']
- [blocks_multiply_xx_0, '0', blocks_float_to_complex_0, '0']
- [blocks_multiply_xx_0, '0', qtgui_time_sink_x_0, '1']
- [blocks_selector_0, '0', band_pass_filter_0, '0']
- [blocks_throttle2_0, '0', blocks_multiply_xx_0, '0']
- [blocks_wavfile_source_0, '0', blocks_selector_0, '0']
- [blocks_wavfile_source_0_0, '0', blocks_selector_0, '1']
- [channels_channel_model_0_0, '0', epy_block_1, '0']
- [channels_channel_model_0_0, '0', qtgui_freq_sink_x_0, '0']
- [channels_channel_model_0_0, '0', qtgui_time_sink_x_0_0, '0']
- [channels_channel_model_0_0, '0', qtgui_waterfall_sink_x_0, '0']
- [epy_block_0_0, rand_out, blocks_msgpair_to_var_0, inpair]
- [epy_block_1, write, epy_block_0_0, trigger]
- [id_write_button, pressed, epy_block_0_0, trigger]
- [id_write_button, pressed, epy_block_1, enable_write]
- [low_pass_filter_0_0, '0', channels_channel_model_0_0, '0']
- [virtual_source_0, '0', low_pass_filter_0_0, '0']

metadata:
  file_format: 1
  grc_version: 3.10.7.0
